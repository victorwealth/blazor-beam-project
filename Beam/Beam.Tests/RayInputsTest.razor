@inherits TestComponentBase

<SnapshotTest Description="Ray Input With Parameter" Setup="@Setup">
    <TestInput>
        <RayInput newRay="@(new RayToCast() { Text = "test text"})" />
    </TestInput>
    <ExpectedOutput>
        <p></p>
        <div class="card">
            <div class="card-header">Cast a New Ray</div>
            <div class="card-body">
                <form>
                    <div class="input-group">
                        <textarea class="form-control valid" value="test text"></textarea>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-secondary">
                                <span class="oi oi-circle-x"></span>
                            </button>
                            <button type="submit" class="btn btn-outline-secondary">
                                <span class="oi oi-audio"></span>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <p></p>


        @*<p></p>
        <Card Title="Cast a New Ray">
            <div class="input-group">
                <input class="form-control" value="test text">
                <div diff:ignore></div>
            </div>
        </Card>
        <p></p>*@
    </ExpectedOutput>
    @code{ void Setup(SnapshotTest test)
                {
                    test.Services.AddSingleton<IDataService, TestDataService>();
                } }
</SnapshotTest>

<Fixture Description="Ray Not Created for empty Input" Test="EmptyInputDoesntCreate">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast())"></RayInput>
    </ComponentUnderTest>
    <Fragment>
        <p></p>
        <div class="card">
            <div class="card-header">Cast a New Ray</div>
            <div class="card-body">
                <form>
                    <div class="input-group">
                        <textarea aria-invalid="" class="form-control invalid" value=""></textarea>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-secondary">
                                <span class="oi oi-circle-x"></span>
                            </button>
                            <button type="submit" class="btn btn-outline-secondary">
                                <span class="oi oi-audio"></span>
                            </button>
                        </div>
                    </div>
                    <div class="validation-message">You can't send an empty Ray!</div>
                </form>
            </div>
        </div>
        <p></p>
    </Fragment>
</Fixture>

<Fixture Description="Ray Created With Valid Input" Test="ValidInputCallsCreate">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast() { Text = "Test"})"></RayInput>
    </ComponentUnderTest>
    <Fragment>
        <p></p>
        <Card title="Cast a New Ray:">
            <form>
                <div class="input-group">
                    <textarea class="form-control invalid" value=""></textarea>
                    <div diff:ignore></div>
                </div>
                <div class="validate-message">You can't send an empty Ray!</div>
            </form>
        </Card>
        <p></p>
    </Fragment>
</Fixture>

@code {
    public void EmptyInputDoesntCreate(Fixture fixture)
    {
        // Arrange
        var dataService = new TestDataService();
        fixture.Services.AddSingleton<IDataService>(dataService);
        var cut = fixture.GetComponentUnderTest<RayInput>();

        bool updateTriggered = false;
        dataService.UpdatedRays += () => updateTriggered = true;

        // Act - cast the ray
        cut.Find("form").Submit();

        // Assert the update was not triggered, and the markup has the validation message
        var expected = fixture.GetFragment();
        Assert.False(updateTriggered);
        cut.MarkupMatches(expected);

    }

    public void ValidInputCallsCreate(Fixture fixture)
    {
        

    }
} 